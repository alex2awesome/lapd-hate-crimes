// Generated by CoffeeScript 1.8.0
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {

    function BubbleChart(data) {
      this.display_toggle = __bind(this.display_toggle, this);

      var max_amount;
      
      this.state = null
      this.sub_state = null
      this.aggregate_state = 'individual'

      this.circle_state = 'deflated'

      // colors for when every bubble is the same
      this.starting_circle_fill = '#D4A017'
      this.starting_circle_stroke = d3.rgb(this.starting_circle_fill).darker();

      // colors for when bubbles are color-coded
      this.fill_color_identity = {'gender': d3.scale.category20(), 'race': d3.scale.category20()}
      this.fill_color_category = d3.scale.category20()
      this.fill_color_prize = d3.scale.category20()
      this.pie_color = d3.scale.category20()

      // read in data
      this.data = data['data'];
      this.award_categories = data['prize-categories'];
      this.time_series_race = data['time-series-race'];
      this.time_series_gender = data['time-series-gender'];
      this.criticism_data = data['criticism'];

      this.toggle_state = 1
      this.toggle_btns = null
      
      standard_map_width = 200
      standard_map_y = 330
      standard_map_x = 20
      full_width = 900
      timeline_x = 60
      timeline_y = 100
      standard_font = '13px'
      standard_map_font = '13px'
      standard_mouseover_font = '12px'
      timeline_width = 250
      this.annotation_data = {
        'all': { 1:[
                      {
                       'x': 10,
                       'y': 230,
                       'text': '<b>PULITZER GOLD:</b> Since 1917, 941 named winners have received journalism Prizes.',
                       'width': 200,
                       'alignment': "left",
                       'id': 1,
                       'font_size':'15px'
                      },
                      {
                       'x': 550,
                       'y': 470,
                       'text': '<em>Mouse over the dots to see details about individual winners.</em>',
                       'width': 200,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size':standard_mouseover_font
                      },
                    ]
                },
          'race': { 
                  1:[
                      {
                       'x': 10,
                       'y': 450,
                       'text': '<b>RACE \"UNKNOWN\"</b>: Journalism associations and other groups recorded the first African-American and Asian winners, and our own research located other early minority winners, but if we could not independently determine otherwise, any winners before 1960 were assumed to be white. After 1960, when more minorities began winning, if we could not confirm a winner\'s race, we labeled the person \"unknown.\"',
                       'width': full_width,
                       'alignment': "left",
                       'id': 1,
                       'font_size':standard_font
                      },
                      {
                       'x': 600,
                       'y': 40,
                       'text': '<em>Mouse over the dots to see details about individual winners.</em>',
                       'width': 300,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size':standard_mouseover_font
                      },
                    ],
                  2: [
                      {
                       'x': 10,
                       'y': 450,
                       'text': '<b>VOICE AND IMAGES:</b> Editorial writing is the most common category among white winners, while African-Americans have won the most Prizes for commentary. Among Asians and Hispanics, photographers dominated the Prizes.',
                       'width': full_width,
                       'alignment': "left",
                       'id': 1,
                       'font_size':standard_font
                      },
                      {
                       'x': 600,
                       'y': 40,
                       'text': '<em>Mouse over the dots to see counts for winners in each category.</em>',
                       'width': 300,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size': standard_mouseover_font
                      },
                    ],
                  3: [
                      {
                       'x': 10,
                       'y': 60,
                       'text': '<b>Current Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'current_prize_category',
                       'font_size': '16px'
                      },
                      {
                       'x': 10,
                       'y': 600,
                       'text': '<b>Past Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'past_prize_category',
                       'font_size': '16px'
                      },
                    ],
                  4: [
                      {
                       'x': 10,
                       'y': 60,
                       'text': '<b>Current Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'current_prize_category',
                       'font_size': '16px'
                      },
                      {
                       'x': 10,
                       'y': 600,
                       'text': '<b>Past Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'past_prize_category',
                       'font_size': '16px'
                      },
                    ],
                  5: [
                      {
                       'x': timeline_x,
                       'y': timeline_y,
                       'text': 'Since 1917, Caucasians have won 84 percent of journalism Prizes.',
                       'width': timeline_width,
                       'alignment': "left",
                       'id': 'race_timeline',
                       'font_size':'14.5px'
                      },
                      {
                       'x': 580,
                       'y': 60,
                       'text': '<em>Mouse over the graphic to see the Prize count by year.</em>',
                       'width': 300,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size':standard_mouseover_font
                      },
                    ],
          },
          'gender':{ 
                  1:[
                      {
                       'x': 10,
                       'y': 150,
                       'text': '<b>WOMEN RISING:</b> <br> Women have won just 16 percent of journalism Pulitzers over the last century, but that is changing. In the last 10 years, women have taken home nearly a third of journalism Prizes.',
                       'width': 100,
                       'alignment': "left",
                       'id': 1,
                       'font_size':standard_font
                      },
                      {
                       'x': 550,
                       'y': 470,
                       'text': '<em>Mouse over the dots to see details about individual winners.</em>',
                       'width': 200,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size':standard_mouseover_font
                      },
                    ],
                  2: [
                      {
                       'x': 10,
                       'y': 450,
                       'text': '<b>CARTOONS AND INVESTIGATIONS:</b> Among male winners, the most common Prize category was editorial cartooning, with editorial writing a close second. Women won most often for investigative reporting, immediately followed by feature writing.',
                       'width': full_width,
                       'alignment': "left",
                       'id': 1,
                       'font_size':standard_font
                      },
                      {
                       'x': 600,
                       'y': 40,
                       'text': '<em>Mouse over the dots to see counts for winners in each category.</em>',
                       'width': 300,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size': standard_mouseover_font
                      },
                    ],
                  3: [
                      {
                       'x': 10,
                       'y': 60,
                       'text': '<b>Current Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'current_prize_category',
                       'font_size': '16px'
                      },
                      {
                       'x': 10,
                       'y': 600,
                       'text': '<b>Past Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'past_prize_category',
                       'font_size': '16px'
                      },
                    ],
                  4: [
                      {
                       'x': 10,
                       'y': 60,
                       'text': '<b>Current Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'current_prize_category',
                       'font_size': '16px'
                      },
                      {
                       'x': 10,
                       'y': 600,
                       'text': '<b>Past Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'past_prize_category',
                       'font_size': '16px'
                      },
                    ],
                  5: [
                      {
                       'x': timeline_x,
                       'y': timeline_y,
                       'text': 'Minna Lewinson, a Columbia Journalism School student, became the first woman to win a journalism Prize in 1918. It would be nearly 20 years before a second woman, <em>New York Times</em> reporter Anne O\'Hare McCormick, joined the winnerâ€™s circle.',
                       'width': timeline_width,
                       'alignment': "left",
                       'id': 'gender_timeline',
                       'font_size':standard_font
                      },
                      {
                       'x': 590,
                       'y': 60,
                       'text': '<em>Mouse over the graphic to see the Prize count by year.</em>',
                       'width': 300,
                       'alignment': "left",
                       'id': 'mouseover_text',
                       'font_size':standard_mouseover_font
                      },
                    ],
          },
          'category':{ 1:[
                      {
                       'x': 10,
                       'y': 60,
                       'text': '<b>Current Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'current_prize_category',
                       'font_size': '16px'
                      },
                      {
                       'x': 10,
                       'y': 600,
                       'text': '<b>Past Prize Categories</b>',
                       'width': 400,
                       'alignment': "left",
                       'id': 'past_prize_category',
                       'font_size': '16px'
                      },
                    ], 2: [
                      {
                       'x': 5,
                       'y': 16.5,
                       'text': '<b>A NOTE ON METHODOLOGY:</b> Because some criticism Prizes honor work in multiple categoriesâ€”take Mark Feeney of The Boston Globe, who won the 2008 Prize for arts criticism on painting, film, and photographyâ€”the number of dots does not correspond to the overall Prize tally.',
                       'width': full_width,
                       'alignment': "left",
                       'id': 'criticism_title',
                       'font_size':standard_font
                      },
                    ], 3: [
                      {
                       'x': 10,
                       'y': 120,
                       'text': '<b>JOURNALISM, ADVOCACY, OR BOTH?</b> <br> <em>The Milwaukee Journal</em> won the 1919 public service Prize for \"its strong and courageous campaign for Americanism in a constituency where foreign elements made such a policy hazardous from a business point of view.\" In 1924, Joseph Pulitzer\'s <em>New York World</em> won the gold medal for \"its work in connection with the exposure of the Florida peonage evil.\"',
                       'width': 150,
                       'alignment': "left",
                       'id': 1,
                       'font_size':standard_font
                      },
                    ], 4: { 0: [
                                        {
                                         'x': 20,
                                         'y': 150,
                                         'text': '<b>IF IT BLEEDS, IT LEADS:</b> War, conflict, and political strife accounted for nearly 60 percent of Pulitzer-winning international coverage over the last 100 years.',
                                         'width': 100,
                                         'alignment': "left",
                                         'id': 'map_title',
                                         'font_size':standard_map_font
                                        },
                          ], 1: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'The end of World War I and the rise of the Nazi Party were among the developments that contributed to a focus on Europe during the first 20 years of the Prizes.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_1',
                                         'font_size':standard_map_font
                                        },
                          ], 2: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'With battlefields stretching from Europe to Africa and the Pacific, World War II captured America\'s attention, and war coverage dominated the Prizes.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_2',
                                         'font_size':standard_map_font
                                        },
                          ], 3: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'The mysteries of life and political maneuvering behind the Iron Curtain generated the most Prize-winning coverage in the years after World War II.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_3',
                                         'font_size':standard_map_font
                                        },
                          ], 4: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'The Vietnam War dominated the Prizes in this era, along with other stories from Asia, including Cold War proxy battles and Richard Nixon\'s historic visit to China.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_4',
                                         'font_size':standard_map_font
                                        },
                          ], 5: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'Growing interest in Israel and the beginning of the Gulf War generated Prize-winning coverage, along with German reunification, democracy protests in China, and hunger in Africa.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_5',
                                         'font_size':standard_map_font
                                        },
                          ], 6: [
                                        {
                                         'x': standard_map_x,
                                         'y': standard_map_y,
                                         'text': 'Coverage of economic and political change in China and war in Afghanistan and Iraq won Prizes in Asia and the Middle East, while stories about genocide, war, famine, AIDS, and Ebola garnered Prizes in Africa.',
                                         'width': standard_map_width,
                                         'alignment': "left",
                                         'id': 'map_6',
                                         'font_size':standard_map_font
                                        },
                          ],
                      }
              },
          }

      this.period = 0

      this.width = 940;
      this.height = 500;
      this.tooltip = CustomTooltip("pulitzer_tooltip", 240);
      this.center = { x: this.width / 2, y: this.height / 2 };
      this.down = {'x': this.width / 2, 'y': 1500}


      this.gender_centers = {
        "Male": { x: this.width / 3, y: this.height / 2},
        "Female": { x: 2 * this.width / 3, y: this.height / 2 }
      };


      w_off = 120
      w_off_1 = 100
      h_off = 150
      this.race_centers = {
        // top left
        "Black":                  { x: 0 * this.width / 3 + w_off,   y: 0 * this.height / 4 + h_off},
        // top middle
        "Other":                  { x: 1 * this.width / 3 + w_off,   y: 0 * this.height / 4  + h_off},
        // right
        "White":                  { x: 2 * this.width / 3 + w_off_1, y: this.height / 3 + 60},
        // bottom left
        "Unknown":                { x: 0 * this.width / 4 + w_off,   y: 2 * this.height / 3 },
        // bottom middle left
        "Hispanic":               { x: 1.2 * this.width / 3,  y: 2 * this.height / 3 },
        // middle middle
        "Pacific Islander":       { x: this.width / 3 , y: this.height / 2 },
        // bottom right
        "Asian":                  { x: 1.8 * this.width / 3,  y: 1.8 * this.height / 3 }
      };

      this.height_expanded = 800
      var w_1 = 4,
          w_2 = 5,
          w_3 = 3,
          h = 6,
          woff = 80,
          woff_1 = 90
          woff_2 = 120
          hoff = 180
          h_off_past = 70
      this.height_expanded_window = 1300

      this.prize_category_centers = {
          // current prizes
          // first row 
          'Editorial Writing' :                         {x: 0 * this.width / w_1 + woff_2, y: 0 * this.height_expanded / h + hoff},
          'Editorial Cartooning' :                      {x: 1 * this.width / w_1 + woff_2, y: 0 * this.height_expanded / h + hoff},
          'National Reporting' :                        {x: 2 * this.width / w_1 + woff_2, y: 0 * this.height_expanded / h + hoff},
          'International Reporting' :                   {x: 3 * this.width / w_1 + woff_2, y: 0 * this.height_expanded / h + hoff},
          //second row
          'Investigative Reporting' :                   {x: 0 * this.width / w_2 + 100, y: 1 * this.height_expanded / h + hoff},
          'Feature Photography':                        {x: 1 * this.width / w_2 + woff, y: 1 * this.height_expanded / h + hoff},
          'Commentary' :                                {x: 2 * this.width / w_2 + woff, y: 1 * this.height_expanded / h + hoff},
          'Criticism':                                  {x: 3 * this.width / w_2 + woff, y: 1 * this.height_expanded / h + hoff}, 
          'Feature Writing':                            {x: 4 * this.width / w_2 + woff, y: 1 * this.height_expanded / h + hoff},
          //third row
          'Local Reporting' :                           {x: 0 * this.width / w_2 + woff_1, y: 2 * this.height_expanded / h + hoff},
          'Explanatory Reporting':                      {x: 1 * this.width / w_2 + woff_1, y: 2 * this.height_expanded / h + hoff},
          'Breaking News Photography':                  {x: 2 * this.width / w_2 + woff_1, y: 2 * this.height_expanded / h + hoff},
          'Breaking News Reporting':                    {x: 3 * this.width / w_2 + woff_1, y: 2 * this.height_expanded / h + hoff}, 
          'Public Service' :                            {x: 4 * this.width / w_2 + woff_1, y: 2 * this.height_expanded / h + hoff},
          //past
          //fourth row
          'Reporting' :                                 {x: 0 * this.width / w_1 + woff_2, y: 3 * this.height_expanded / h + hoff + h_off_past},
          'Local Investigative Specialized Reporting' : {x: 1 * this.width / w_1 + woff_2, y: 3 * this.height_expanded / h + hoff + h_off_past},
          'Spot News Photography':                      {x: 2 * this.width / w_1 + woff_2, y: 3 * this.height_expanded / h + hoff + h_off_past},
          'Photography' :                               {x: 3 * this.width / w_1 + woff_2, y: 3 * this.height_expanded / h + hoff + h_off_past},
          // fifth row
          'Explanatory Journalism':                     {x: 0 * this.width / w_1 + woff_2, y: 4 * this.height_expanded / h + hoff + h_off_past},
          'Correspondence' :                            {x: 1 * this.width / w_1 + woff_2, y: 4 * this.height_expanded / h + hoff + h_off_past}, 
          'Beat Reporting':                             {x: 2 * this.width / w_1 + woff_2, y: 4 * this.height_expanded / h + hoff + h_off_past},
          'Local Reporting - No edition time' :         {x: 3 * this.width / w_1 + woff_2, y: 4 * this.height_expanded / h + hoff + h_off_past},
          // sixth row
          'Local General or Sport News Reporting' :     {x: 0 * this.width / w_1 + woff_2, y: 5 * this.height_expanded / h + hoff + h_off_past},
          'Local Reporting - Edition time' :            {x: 1 * this.width / w_1 + woff_2, y: 5 * this.height_expanded / h + hoff + h_off_past},
          'Specialized Reporting':                      {x: 2 * this.width / w_1 + woff_2, y: 5 * this.height_expanded / h + hoff + h_off_past},
          'Telegraphic Reporting-International' :       {x: 3 * this.width / w_1 + woff_2, y: 5 * this.height_expanded / h + hoff + h_off_past},
          // seventh row
          'Telegraphic Reporting-National' :            {x: 0 * this.width / w_1 + woff_2, y: 6 * this.height_expanded / h + hoff + h_off_past},
          'Newspaper History Award':                    {x: 1 * this.width / w_1 + woff_2, y: 6 * this.height_expanded / h + hoff + h_off_past},
          'General News Reporting':                     {x: 2 * this.width / w_1 + woff_2, y: 6 * this.height_expanded / h + hoff + h_off_past},
          'Spot News Reporting':                        {x: 3 * this.width / w_1 + woff_2, y: 6 * this.height_expanded / h + hoff + h_off_past},
        }

      var w_1 = 4,
          w_2 = 3
          h = 6
          woff_1 = 110,
          woff_2 = 160
          hoff = -5

      this.criticism_centers = {
          // first row 
          'Architecture' :                        {x: 0 * this.width / w_1 + woff_1, y: 1 * this.height / h + hoff},
          'Music' :                               {x: 1 * this.width / w_1 + woff_1, y: 1 * this.height / h + hoff},
          'Television' :                          {x: 2 * this.width / w_1 + woff_1, y: 1 * this.height / h + hoff},
          'Art':                                  {x: 3 * this.width / w_1 + woff_1, y: 1 * this.height / h + hoff},
          //second row
          'Film' :                                {x: 0 * this.width / w_2 + woff_2, y: 2 * this.height / h + hoff},
          'Dance' :                               {x: 1 * this.width / w_2 + woff_2, y: 2 * this.height / h + hoff}, 
          'Books' :                               {x: 2 * this.width / w_2 + woff_2, y: 2 * this.height / h + hoff},
          //third row
          'Theater' :                             {x: 0 * this.width / w_1 + woff_1, y: 3 * this.height / h + hoff},
          'Journalism' :                          {x: 1 * this.width / w_1 + woff_1, y: 3 * this.height / h + hoff},
          'Cultural criticism' :                  {x: 2 * this.width / w_1 + woff_1, y: 3 * this.height / h + hoff},
          'Photography' :                         {x: 3 * this.width / w_1 + woff_1, y: 3 * this.height / h + hoff},
          //forth row
          'Automobiles' :                         {x: 0 * this.width / w_2 + woff_2, y: 4 * this.height / h + hoff},
          'Fashion' :                             {x: 1 * this.width / w_2 + woff_2, y: 4 * this.height / h + hoff},
          'Food' :                                {x: 2 * this.width / w_2 + woff_2, y: 4 * this.height / h + hoff},
          // null row
          'none' :                                {x: this.width / 2,                y: 1000},
      }

      this.public_service = [
        {'name':'Local corruption',     'awards': 38},
        {'name':'Social injustice',     'awards': 27},
        {'name':'Disaster coverage',    'awards': 4},
        {'name':'Government negligence','awards': 10},
        {'name':'Other',                'awards': 17}
      ]

      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.central_nodes = { 'all':{}, 'gender':{}, 'race':{}, 'prize categories':{} }

      this.award_scale_x = null;
      this.award_scale_y = null;
      this.maxRadius = 5.5
      this.radius = 5.5

      this.max_amount = 5.5

      this.move_override = null

      // ====================
      // parameters for time-series graph
      // ====================
      this.linear_x = null
      this.linear_y = null
      this.area = null
      this.line = null
      this.stack = null
      this.linear_xAxis = null
      this.tooldiv = null

      // =====================
      //
      // =====================
      this.pie_radius = Math.min(this.width, this.height) / 2;

      this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
      this.process_data();
      // window.central_nodes = this.central_nodes

      this.create_vis();
    }

    BubbleChart.prototype.process_data = function() {
      var that = this 

      this.award_scale_x = d3.scale.ordinal().domain(this.award_categories).rangePoints([-20, 20]);
      this.award_scale_y = d3.scale.ordinal().domain(d3.shuffle(this.award_categories)).rangePoints([-20, 20]);

      ////
      // process data for bubblechart
      ////
      var subject_dict = {}
      nodes = []

      this.data.map(function(d) {

          var subject = 'none'
          var output = []
          // if it's a criticism award, let's join it with our criticism records
          if (d['Prize Category'] == 'Criticism'){
            output = that.criticism_data.filter(function(sd) { return sd['Name (Individual)'] == d['Name (Individual)'] })

            if (output.length > 1){
              key = subject_dict[d['Name (Individual)']] || 0
              subject = output[ key ]['Subject']
              subject_dict[d['Name (Individual)']] = (subject_dict[d['Name (Individual)']] + 1) || 0
            }
            else if (output.length == 1)
              subject = output[0]['Subject']
          }
          var node = {
              radius: that.radius,
              award: d['Prize Category (Corr)'],
              name: d['Name (Individual)'],
              paper: d['Name (Paper)'],
              gender: d.Gender,
              race: d.Race,
              year: d.Year,
              subject: subject,
              x: that.award_scale_x(d['Prize Category (Corr)']) * 20 + (Math.random() - .5) * 1500,
              y: that.award_scale_y(d['Prize Category (Corr)']) * 20 + (Math.random() - .5) * 980,
              extra: false,
              opacity: 1,
            }

          nodes.push(node)

          // get node centers for aggregate counts 
          // overall central node
          if (!(node.award in that.central_nodes['all']))
            that.central_nodes['all'][node.award] = {'node':node, 'count':1}
          else
            that.central_nodes['all'][node.award]['count'] = that.central_nodes['all'][node.award]['count'] + 1 
          // center for spatial: gender, color: award
          if (!((node.award + '-' + node.gender) in that.central_nodes['gender']))
            that.central_nodes['gender'][node.award + '-' + node.gender] = {'node':node, 'count':1}
          else
            that.central_nodes['gender'][node.award + '-' + node.gender]['count'] = that.central_nodes['gender'][node.award + '-' + node.gender]['count'] + 1
          // center for spatial: race, color: award
          if (!((node.award + '-' + node.race) in that.central_nodes['race']))
            that.central_nodes['race'][node.award + '-' + node.race] = {'node':node, 'count':1}
          else
            that.central_nodes['race'][node.award + '-' + node.race]['count'] = that.central_nodes['race'][node.award + '-' + node.race]['count'] + 1
          // center for spatial: award, color: race
          if (!((node.award + '-' + node.race) in that.central_nodes['prize categories']))
            that.central_nodes['prize categories'][node.award + '-' + node.race] = {'node':node, 'count':1}
          else
            that.central_nodes['prize categories'][node.award + '-' + node.race]['count'] = that.central_nodes['prize categories'][node.award + '-' + node.race]['count'] + 1
          // center for spatial: award, color: gender
          if (!((node.award + '-' + node.gender) in that.central_nodes['prize categories']))
            that.central_nodes['prize categories'][node.award + '-' + node.gender] = {'node':node, 'count':1}
          else
            that.central_nodes['prize categories'][node.award + '-' + node.gender]['count'] = that.central_nodes['prize categories'][node.award + '-' + node.gender]['count'] + 1


          for (i = 1; i < output.length; i++) {
            nodes.push(
              {
                radius: that.radius,
                award: d['Prize Category'],
                name: d['Name (Individual)'],
                paper: d['Name (Paper)'],
                gender: d.Gender,
                race: d.Race,
                year: d.Year,
                subject: output[i]['Subject'],
                extra: true,
                x: that.award_scale_x(d['Prize Category']) * 20 + (Math.random() - .5) * 1500,
                y: that.award_scale_y(d['Prize Category']) * 20 + (Math.random() - .5) * 980,
                opacity: 0
              }
            )
          } 
        })

      this.nodes = nodes

      // ==========================
      // process data for time series
      ////=========================
      parseTime = d3.time.format("%Y").parse
      this.time_series_gender.forEach(function(s){
        s.values.forEach(function(d){
            d.date = parseTime(d.date)
            d.count = parseFloat(d.count) })
        s.maxCount = d3.max(s.values, function(d){ return d.count })
      })
      this.time_series_gender.sort(function(a,b){return b.maxCount - a.maxCount})
      this.time_series_race.forEach(function(s){
        s.values.forEach(function(d){
            d.date = parseTime(d.date)
            d.count = parseFloat(d.count) })
        s.maxCount = d3.max(s.values, function(d){ return d.count })
      })
      this.time_series_race.sort(function(a,b){return b.maxCount - a.maxCount})
    };

    BubbleChart.prototype.create_vis = function() {
        var that = this;
        this.vis = d3.select("#vis")
                      .append("svg")
                      .attr("width", this.width)
                      .attr("height", this.height)
                      .attr("id", "svg_vis");

        window.vis = this.vis

        this.circles = this.vis.selectAll("circle")
                                .data(this.nodes);

        this.circles.enter()
              .append("circle")
              .attr("r", 0)
              .attr("fill", that.starting_circle_fill )
              .attr("stroke-width", 1.5)
              .attr('opacity', function(d) { return d.opacity }) 
              .attr("stroke", that.starting_circle_stroke )
              .attr("id", function(d){ return d.extra ? 'extra-categories' : 'winners'})
              .on("mouseover", function(d, i) { 
                d3.selectAll('#mouseover_text').transition().duration(2000).attr('opacity',0);
                return that.show_details(d, i, this); 
              })
              .on("click", function(d, i) { return that.show_details(d, i, this); })
              .on("mouseout", function(d, i) { return that.hide_details(d, i, this); });


          this.inflate_circles()

          this.linear_x = d3.time.scale().range([0, that.width])
          this.linear_y = d3.scale.linear().range([that.height, 0])

          this.area = d3.svg.area()
              .interpolate("basis").tension(.2)
              .x(function(d) { return that.linear_x(d.date) })

          this.line = d3.svg.line()
              .interpolate("basis").tension(.2)
              .x(function(d) { return that.linear_x(d.date) })

          this.stack = d3.layout.stack()
                          .values(function(d) { return d.values })
                          .x(function(d){ return d.date })
                          .y(function(d){ return d.count})
                          .out(function(d, y0, y){ d.count0 = y0 })
                          .order("reverse")

          this.linear_xAxis = d3.svg.axis()
                    .scale(this.linear_x)
                    .tickSize(-this.height + 100)
                    .tickFormat(d3.time.format('%Y'));

          this.arc = d3.svg.arc()
                      .outerRadius(this.pie_radius - 10)
                      .innerRadius(this.pie_radius - 70);

          this.pie = d3.layout.pie()
                        .sort(null)
                        .value(function(d) { return d.awards; });


          // ## append mouseover div
          this.tooldiv = d3.select("body").append("div")   
              .attr("class", "tooldiv")               
              .style("display", "none");

      }

    ///
    // some mechanics
    ///

    // reinstate circles after showing timelines
    BubbleChart.prototype.inflate_circles = function() {
      if (this.circle_state == 'deflated'){
        if (this.state == 'all'){

        } else {
          this.circles.transition()
                      .duration(2000)
                      .attr("r", function(d) { return d.radius; });
        }
          this.circle_state = 'inflated'
      }
    };



    BubbleChart.prototype.charge = function(d) {
          // -3.78125 for radius 5.5
        return -Math.pow(d.radius, 2.0) / 8
      };

    BubbleChart.prototype.start = function() {
        return this.force = d3.layout.force()
                              .nodes(this.nodes)
                              .size([this.width * .7, this.height * .7]);
      };

    //////////////////////////////////////////////////////////////////////
    //// //////   //   ////////  //////  //     //////    //  //
    //// //   //  //   //        //  //  //     //  //     ///
    //// //   //  //   --- //    //////  //     //////      //
    //// /////    //  ///////    //      /////  //  //      //
    //////////////////////////////////////////////////////////////////////

    /////////
    // display and move function
    /////////
    BubbleChart.prototype.display_group = function() {
        var that = this 
        // this.inflate_circles()
        this.change_circle_color()
        // that.vis.attr('height', that.height)


        d3.selectAll('.request').transition().attr('opacity',0)
        $('.request').remove();
        $('.x.axis').remove();
        $('.arc').remove();

        d3.select('.background').remove()
        d3.selectAll('.subunit').remove()
        d3.select('#map_label').text('')
        d3.selectAll('.legend').remove()
        d3.selectAll('.pulitzer-winners').remove()
        d3.selectAll('.annotation_text').remove()

        this.start_force(false)
        if (this.sub_state != 'international')
          this.annotation_text()
        this.hide_label();

        }

    BubbleChart.prototype.action_toggle = function(){
      var that = this 
      // segregate based on identity
      // individual
      if ((that.state == 'race' || that.state == 'gender') && (this.toggle_state == 1)){
        var insert = (that.state == 'race' ) ? 'Race/Ethnicity' : 'Sex/Gender' 
        d3.select('#subheader').html('<em>Breakdown by ' + insert + '</em>')
        that.sub_state = 'identity'
        that.aggregate_state = 'individuals'
        that.show_individuals();
        that.vis.attr('height', that.height)
        that.display_group();
        that.change_toggle_active('#toggle_top_level', 1);
        that.createLegend()

      // segregate based on identity
      // aggregated
      } else if ((that.state == 'race' || that.state == 'gender') && (this.toggle_state == 2)){
        var insert = (that.state == 'race' ) ? 'Race/Ethnicity' : 'Sex/Gender' 
        d3.select('#subheader').html('<em>Breakdown by ' + insert + ' (Aggregate)</em>')
        that.sub_state = 'identity'
        that.aggregate_state = 'aggregate'
        that.vis.attr('height', that.height)
        that.change_toggle_active('#toggle_top_level', 2)
        that.display_group();
        that.show_aggregate();
        that.createLegend()

      // segregate based on prize
      // individual
      } else if ((that.state == 'race' || that.state == 'gender') && (this.toggle_state == 3)){
        var insert = (that.state == 'race' ) ? 'Race/Ethnicity' : 'Sex/Gender' 
        d3.select('#subheader').html('<em>Breakdown by ' + insert + ' and Prize Category</em>')
        that.sub_state = 'prize category' 
        that.change_toggle_active('#toggle_top_level', 3)
        that.show_individuals();
        that.display_group()
        that.vis.attr('height', that.height_expanded_window)
        that.display_cluster_label()
        that.createLegend()

      // segregate based on prize
      // aggregate
      } else if ((that.state == 'race' || that.state == 'gender') && (this.toggle_state == 4)){
        var insert = (that.state == 'race' ) ? 'Race/Ethnicity' : 'Sex/Gender' 
        d3.select('#subheader').html('<em>Breakdown by ' + insert + ' and Prize Category (Aggregate)</em>')
        that.sub_state = 'prize category' 
        that.aggregate_state = 'aggregate'
        that.change_toggle_active('#toggle_top_level', 4)
        that.display_group()
        that.show_aggregate();
        that.vis.attr('height', that.height_expanded_window)
        that.display_cluster_label()
        that.createLegend()

      // display identity
      // display line graph 
      } else if ((that.state == 'race' || that.state == 'gender') && (this.toggle_state == 5)){
        var insert = (that.state == 'race' ) ? 'Race/Ethnicity' : 'Sex/Gender' 
        d3.select('#subheader').html('<em>' + insert + ' Across Time</em>')
        that.vis.attr('height', that.height)
        that.change_toggle_active('#toggle_top_level', 5)
        d3.selectAll('.labels').remove()
        that.remove_circles()
        that.vis.attr('height', that.height)
        that.make_linear_chart()

      // display categories
      // landing page for "categories" tab
      } else if ((that.state == 'category') && (this.toggle_state == 1)){
        d3.select('#subheader').html('<em>Breakdown by Prize Category</em>')
        that.sub_state = 'prize category'
        that.change_toggle_active('#toggle_top_level', 1)
        that.show_individuals();
        that.display_group()
        that.vis.attr('height', that.height_expanded_window)
        that.display_cluster_label()
        that.vis.on('click',null);

      // display categories
      // display criticism
      } else if ((that.state == 'category') && (this.toggle_state == 2)) {
        d3.select('#subheader').html('<em>Criticism Prizes by Publication</em>')
        that.vis.attr('height', that.height)
        that.sub_state = 'criticism'
        d3.selectAll(".labels:not(#Criticism)").remove()
        that.change_toggle_active('#toggle_top_level', 2)
        that.display_group()
        that.circle_state = 'deflated'
        that.display_cluster_label()
        that.createLegend()
        that.vis.on('click',null);

      // display public service 
      } else if ((that.state == 'category') && (this.toggle_state == 3)) {
        d3.select('#subheader').html('<em>Public Service Prizes by Topic</em>')
        that.vis.attr('height', that.height)
        that.sub_state = 'public service'
        d3.selectAll('.labels').remove()
        that.change_toggle_active('#toggle_top_level', 3)
        that.display_group()
        that.display_public_service_pie_chart()
        that.vis.on('click',null);

      // display international
      } else if ((that.state == 'category') && (this.toggle_state == 4)) {
        d3.select('#subheader').html('<em>International Prizes by Region and Era</em>')
        that.sub_state = 'international'
        d3.selectAll('.labels').remove()
        that.change_toggle_active('#toggle_top_level', 4)
        that.remove_circles()
        that.vis.attr('height', that.height - 60)
        that.display_group()
        that.display_international_map()
        that.annotation_text()
      }
    }

    ///////////////////////////////////////////////
    // move functions
    ///////////////////////////////////////////////
    BubbleChart.prototype.start_force = function(aggregate){
      var that = this
      var target_func = this.get_target_function()

      var alpha_mult = aggregate ? 2 : 1

      this.force.gravity(that.layout_gravity)
        .chargeDistance(500)
        .friction( 0.9 )
        .on("tick", function(e) {
                that.circles
                    .each(target_func(e.alpha * alpha_mult, that))
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; })
            })
        .charge( that.charge )


      this.force.start();
    }

    BubbleChart.prototype.move_down = function(alpha, that) {
      var target = that.down
      return function(d) {
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    BubbleChart.prototype.move_center = function(alpha, that) {
      var target = that.center 
      return function(d) {
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    BubbleChart.prototype.move_gender = function(alpha, that) {
      return function(d) {
          target = that.gender_centers[d.gender]
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    BubbleChart.prototype.move_race = function(alpha, that) {
      return function(d) {
          target = that.race_centers[d.race]
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    BubbleChart.prototype.move_prize_category = function(alpha, that) {
      return function(d) {
          target = that.prize_category_centers[d.award]
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    BubbleChart.prototype.move_criticism = function(alpha, that) {
      var target = (that.move_override || that.sub_state == 'international') ? that.down : that.center 
      return function(d) {

          target = that.criticism_centers[d.subject]
          
          d.x = d.x + (target.x - d.x + that.award_scale_x(d.award)) * (that.damper + 0.02) * alpha;
          d.y = d.y + (target.y - d.y + that.award_scale_y(d.award)) * (that.damper + 0.02) * alpha;
        };
    };

    ///////////
    // Display the labels for the Race/Gender Categories
    //////////
    BubbleChart.prototype.display_cluster_label = function() {
      // set positions if we're transition to gender
      if (this.state == 'gender') { 
            var position = {
                  "Male":              { x: 160,                  y: 40 },
                  "Female":            { x: this.width - 160,     y: 40 }
            };
      } // set positions if we transition to race
      if (this.state == 'race') {
            var position = {
                  // top
                  "Black":             { x: 160,                   y: 40 },
                  "Other":             { x: this.width / 2 - 100,  y: 40 },
                  "White":             { x: this.width - 100,      y: 40 },
                  // bottom
                  "Unknown":           { x: 160,                   y: this.height  - 40 },
                  "Hispanic":          { x: 120 + this.width / 4,  y: this.height - 40 },
                  "Pacific Islander":  { x: 120 + this.width / 2,  y: this.height - 40 },
                  "Asian":             { x: this.width - 160,      y: this.height - 40 }
                };
      } 
      if (this.sub_state == 'prize category')
        var position = this.prize_category_centers

      if (this.sub_state == 'criticism')
        var position = this.criticism_centers

      if (this.sub_state == 'public service')
        var position = {"Public Service": { x: this.width / 2, y: this.height / 2 } }

      var labels = d3.keys(position);
      var legend = this.vis.selectAll("labels")
                        .data(labels);

      legend.enter()
              .append("text")
              .attr("class", "labels")
              .attr('id', function(d){ return d })
              .attr("x", function(d) { return position[d]['x']; })
              .attr("y", function(d) { return position[d]['y']})
              .attr("text-anchor", "middle")
              .text(function(d) { return d; });

    };


    // Generic hide-label function 
    BubbleChart.prototype.hide_label = function() {
      d3.selectAll(".labels").transition().attr('opacity',0);
      $(".labels").remove();
    };

    /////////
    // tooltip handling
    /////////
    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">" + data.name + "</span><span class=\"value\"> (" + data.year + ")</span><br/>";
      content += "<span class=\"name\"><em>" + data.paper + "</em></span><br/>";

      if ((this.sub_state == 'identity') || (this.state == 'all')){
        content += "<span class=\"name\">Category:</span><span class=\"value\"> " + data.award + "</span>";
        
        agg_content = "<span class=\"name\">Category:</span><span class=\"value\"> " + data.award + "</span><br/>";
      }
      else if (this.sub_state == 'prize category' || (this.state == 'category') && (this.sub_state == 'identity') ){
        content += "<span class=\"name\">Race:</span><span class=\"value\"> " + data.race + "</span><br/>";
        content += "<span class=\"name\">Sex/Gender:</span><span class=\"value\"> " + data.gender + "</span>";
        
        agg_content = "<span class=\"name\">" + (this.state == 'race' ? 'Race:' : 'Sex/Gender') + "</span><span class=\"value\"> ";
        agg_content += data[this.state] + "</span><br/>";
      }

      else if ((this.sub_state == 'criticism') || (this.sub_state == 'public service')){
        agg_content = "<span class=\"name\">" + data.name + "</span><span class=\"value\"> (" + data.year + ")</span><br/>";
        agg_content += "<span class=\"name\"><em>" + data.paper + "</em></span><br/>";

      }

      agg_content += "<span class=\"name\">Count:</span><span class=\"value\"> " + data.count + "</span>";
      return this.tooltip.showTooltip(this.aggregate_state == 'aggregate' ? agg_content : content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      var that = this 
      d3.select(element).attr("stroke", function(d) {
          if (that.state == 'all')
            return that.starting_circle_stroke

          else if (that.sub_state=='prize category' && that.state != 'category') // && that.state=='category' && that.sub_state == 'identity')
            return d3.rgb(that.fill_color_identity[ that.state ](d[ that.state ])).darker()

          else if (that.state != 'category' && that.sub_state == 'identity')
            return d3.rgb(that.fill_color_identity[ that.state ](d[ that.state ])).darker()

          else if (that.state == 'category' && that.sub_state=='prize category')
            return d3.rgb(that.fill_color_prize(d.award)).darker()

          else if (that.sub_state == 'criticism')
            if (d.award == 'Criticism'){
              return d3.rgb(that.fill_color_category(d['paper'])).darker()
            }
        })

      return this.tooltip.hideTooltip();
      };

        // transition into line graph over time 
    BubbleChart.prototype.remove_circles = function(){
      var that = this
      this.move_override = true
      this.display_group()
      this.move_override = null
      this.circles
        .transition()
        .duration(400)
        .attr('r',0)

      this.circle_state = 'deflated'
    }

    // Generic hide-label function 
    BubbleChart.prototype.change_toggle_active = function(id, index) {
        d3.selectAll(id)
              .attr('class', function(d,i){ return (d==index) ? 'btn active' : 'btn' })
    };

    // ========================================================
    // handles changes in circle color and radius
    // ========================================================
    BubbleChart.prototype.change_circle_color = function(){
      var that = this
      if (this.state != 'all'){
            this.circles
                  .transition()
                  .duration(400)
                  .attr("fill", function(d) {
                    if (that.state=='race' || that.state == 'gender')
                      return that.fill_color_identity[ that.state ](d[ that.state ])

                    else if ((that.state=='category') && (that.sub_state == 'prize category'))
                      return that.fill_color_prize(d.award)

                    else if (that.sub_state == 'criticism'){
                      if (d.award == 'Criticism'){
                        return that.fill_color_category(d['paper'])
                      }
                    }
                  })
                  .attr("stroke", function(d) {
                    if (that.state=='race' || that.state == 'gender')
                      return d3.rgb(that.fill_color_identity[ that.state ](d[ that.state ])).darker();

                    else if ( (that.state=='category') && (that.sub_state == 'prize category') )
                      return d3.rgb(that.fill_color_prize(d.award)).darker();

                    else if (that.sub_state == 'criticism'){
                      if (d.award == 'Criticism'){
                        return d3.rgb(that.fill_color_category(d['paper'])).darker()
                      }
                    }
                  })
                  .attr('r', function(d) {
                    if (that.sub_state=='prize category') 
                      return 4.5

                    else if (that.sub_state == 'criticism')
                      return (d['award'] == 'Criticism') ? that.radius : 0

                    else if (that.state == 'all')
                      return (d['extra']) ? that.radius : that.radius

                    else
                      return that.radius
                  })
                  .attr('opacity', function(d){
                    if (that.sub_state == 'criticism')
                      return 1
                    else
                      return (d['extra']) ? 0 : 1

                  })
          }
      else if ((this.state == 'all') & (this.move_override != null)) {
        this.circles
              .transition()
              .duration(400)
              .attr("fill", that.starting_circle_fill)
              .attr("stroke", that.starting_circle_stroke)
              .attr('r', function(d) { return (d['extra']) ? 0 : that.radius})}
      }

    ///////////////// ========================================
    // Toggle buttons second level (first is handled by root)
    ///////////////// ========================================
    BubbleChart.prototype.display_toggle = function(){
      var that = this 

      if ((that.state == 'race') || (that.state == 'gender'))
        var toggle_data = [1,2,3,4,5,'next']
      else
        var toggle_data = [1,2,3,4,'next']

      this.toggle_btns = d3.select('#toggle')
            .selectAll("a")
            .data(toggle_data)
            .enter()
            .append('a')
            .attr('class',function(d, i) {return (i==0) ? 'btn active' : 'btn'})
            .attr('id','toggle_top_level')
            .text(function(d){ return d })
            .on('click', function(d,i) {that.handle_toggle(d, i, that)})
       }

    BubbleChart.prototype.handle_toggle = function(d, i, that){
      console.log(that.toggle_state)
      console.log(d)

      if (d != 'next'){
        that.toggle_state = d
        that.action_toggle()
      } else {
        if (((that.state == 'race') || (that.state == 'gender')) && (that.toggle_state == 5))
          that.toggle_state = 1

        else if ((that.state=='category') && (that.toggle_state == 4))
          that.toggle_state = 1
        
        else
          that.toggle_state = that.toggle_state + 1
        that.action_toggle()
      }
    }

    BubbleChart.prototype.get_target_function = function(){
      var that = this 
      var target_func = (that.move_override || that.sub_state == 'international') ? that.move_down : that.move_center 
      if (that.move_override == null){

        if (that.state == 'gender' && that.sub_state != 'prize category')
          target_func = that.move_gender

        else if (that.state == 'race' && that.sub_state != 'prize category')
          target_func = that.move_race

        else if (that.sub_state == 'prize category')
          target_func = that.move_prize_category

        else if (that.state == 'category' && that.sub_state == 'identity')
          target_func = that.move_prize_category

        else if (that.sub_state == 'criticism')
          target_func = that.move_criticism

        else if (that.sub_state == 'public service')
          // target_func = (d.award == 'Public Service') ? that.move_center : that.move_down
          target_func = that.move_down
      }
      return target_func
    }

    BubbleChart.prototype.show_aggregate = function(){
      var that = this 
      var central_nodes = this.central_nodes[this.state]
      var that = this
      var target_func = this.get_target_function()
 
      this.circles
            .transition()
            .duration(500)
            .attr('r', function(d){
              key = d.award + '-' + (that.state=='race'? d.race : d.gender)
              if (d == central_nodes[key]['node']){
                d['count'] = central_nodes[key]['count']
                return Math.sqrt(central_nodes[key]['count'] + 1) * 4
              }
              else
                return 0
            })
      this.start_force(true);
    }

    BubbleChart.prototype.change_radius = function(alpha, that, go_to) {
      var central_nodes = that.central_nodes[that.state]
      return function(d) {
          if (go_to == 'individual'){
            d.radius
          }
          else if (go_to == 'aggregate') {
              key = d.award + '-' + (that.state=='race'? d.race : d.gender)
              if (d == central_nodes[key]['node']){
                if (d.radius < (Math.sqrt(central_nodes[key]['count']) * 2.5) ){
                  d['count'] = central_nodes[key]['count']
                  d.radius = d.radius + ( Math.sqrt(central_nodes[key]['count']) * 2.5 * (that.damper + 0.01) * alpha )
                }
              } else {
                  d.radius = d.radius - (d.radius * 10 * alpha);
              }
            };
          }    
      };

    BubbleChart.prototype.show_individuals = function(){
      var that = this 
      this.aggregate_state = 'individuals'

      if (this.state=='all'){
            this.circles
                  .transition()
                  .duration(500)
                  .attr('r', function(d) { return d.extra ? 0 : that.radius })
                  .attr("fill", that.starting_circle_fill)
                  .attr("stroke", that.starting_circle_stroke)
      } else if (this.sub_state == 'prize category') {
            this.circles
                  .transition()
                  .duration(500)
                  .attr('r', that.radius)
      } else {
            this.circles
                  .transition()
                  .duration(500)
                  .attr('r', function(d) { return d.extra ? 0 : that.radius })

            this.start_force(false)
            }
      }

    BubbleChart.prototype.display_public_service_pie_chart = function(){
      var that = this
      var g = this.vis.selectAll(".arc")
                     .data(this.pie(this.public_service))
                     .enter().append("g")
                     .attr("class", "arc")
                     .attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")")

      g.append("path")
          .attr("d", this.arc)
          .style("fill", function(d) { return that.pie_color(d.data.name); });

      g.append("text")
          .attr("transform", function(d) { return "translate(" + that.arc.centroid(d) + ")"; })
          .attr("dy", ".35em")
          .attr('class','pie_chart_text')
          .style('font','Helvetica')
          .text(function(d) { return d.data.name; });
    }

    BubbleChart.prototype.annotation_text = function() {
      var that = this
      // left side
      if (this.sub_state != 'international'){
        data = this.annotation_data[this.state][this.toggle_state]
      } else if (this.sub_state == 'international') {
        period = this.period == 7 ? 0 : this.period
        data = this.annotation_data[this.state][this.toggle_state][period]      
      }

      this.vis.selectAll('#annotation_text')
            .data(data)
          .enter().append('text')
            .attr("x", function(d) { return d.x; })
            .attr("y", function(d) { return d.y; })
            .attr('class', 'annotation_text')
            .attr('id', function(d) {return d.id; })
            .attr("text-anchor", function(d) { return d.alignment; })
            .text( function(d) { return d.text; })
            .style('font-size', function(d) {return d.font_size })
            .call(that.wrap);
    }

    BubbleChart.prototype.wrap = function(text){ //, width, block_id) {
      text.each(function() {  
        var text = d3.select(this)
        var data = text.data()[0],
            words = data['text'].split(/\s+/).reverse(),
            // words = text.text().split(/\s+/).reverse(),
            word,
            lineNumber = 0,
            lineHeight = 1.1, // ems
            y = text.attr("y"),
            x = text.attr("x"),
            dy = 0
            tspan = text.text(null)
                          .append("tspan")
                          .attr("x", x)
                          .attr("y", y)
                          .attr("dy", dy + "em");

        word_id_counter = 0
        bold_state = false
        italic_state = false

        // TODO: Add parser to handle link tags.. 
        // link_state = false
        // <a href="http://www.yahoo.com">here</a>

        while (word = words.pop()) {
          // change state to bold 
          if (word.split('<b>').length > 1){
            bold_state = true
            word = word.replace('<b>','')
          }
          //change state to italic
          if (word.split('<em>').length > 1){
            italic_state = true
            word = word.replace('<em>','')
          }

          tspan.append('tspan')
                .attr('id', 'word' + '_' + word_id_counter + '_' + data['id'])
                .attr('font-weight', bold_state ? 'bold' : 'normal')
                .attr('font-style', italic_state ? 'italic' : 'normal')
                .text(
                  word.replace('</b>','').replace('</em>','').replace(new RegExp('<br>', 'g'), '')
                  + " "
                );

            // handle overflow
          if (tspan.node().getComputedTextLength() >= data['width']) {
            d3.select("#" + 'word' + '_' + word_id_counter + '_' + data['id']).remove();
            // handle edge case where line break and overflow occur at same time
            word = word.replace('<br>','')

            tspan = text.append("tspan")
                          .attr("x", x)
                          .attr("y", y)
                          .attr('id', 'wrap-text')
                          .attr("dy", ++lineNumber * lineHeight + dy + "em")
            
            tspan.append('tspan')
                  .attr('id', 'word' + '_' + word_id_counter + '_' + data['id'])
                  .attr('font-weight', bold_state ? 'bold' : 'normal')
                  .attr('font-style', italic_state ? 'italic' : 'normal')
                  .text(word.replace('</em>','').replace('</b>','').replace(new RegExp('<br>', 'g'), '') + " ");
            }

            // handle newline (can handle multiple)
          if ((total_br = word.split('<br>').length) > 1){
            lineNumber = lineNumber + (total_br - 1)
            tspan = text.append("tspan")
              .attr("x", x)
              .attr("y", y)
              .attr('id', 'wrap-text')
              .attr("dy", lineNumber * lineHeight + dy + "em")
          }
          
          //change state back to normal
          if (word.split('</b>').length > 1){
            bold_state = false
          }

          //change state back to normal
          if (word.split('</em>').length > 1){
            italic_state = false
          }

          word_id_counter = word_id_counter + 1
        }
      });
    }


    // # ---
    // # Code to transition to Stacked Area chart.
    // # ---
    BubbleChart.prototype.make_linear_chart = function() {
      // # first, lets setup our x scale domain
      // # this assumes that the dates in our data are in order
      var that = this
      var inner_height = that.height * .92

      if (that.state == 'gender')
        data = this.time_series_gender 
      else if (that.state == 'race')
        data = this.time_series_race

      minDate = d3.min(data, function(d) { return d.values[0].date })
      maxDate = d3.max(data, function(d) { return d.values[d.values.length - 1].date })
      this.linear_x.domain([minDate, maxDate])

      dates = data[0].values.map(function(v) { return v.date })
      dates = dates.filter(function(d){ return d.getFullYear() % 5 == 2 })

      this.linear_xAxis.tickValues(dates)


      this.vis.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + (inner_height - 10) + ")")
        .call(that.linear_xAxis)

      this.area.y0(inner_height / 2)
        .y1(inner_height / 2)

      g = this.vis.selectAll(".request")
        .data(data)
        .enter()

      requests = g.append("g")
        .attr("class", "request")
        .attr('id', function(d) { return d.key })

      requests.append("path")
        .attr("class", "area")
        .style("fill", function(d) {return that.fill_color_identity[that.state](d.key)})
        .attr("d", function(d) {return that.area(d.values)})

      requests.append("path")
        .attr("class", "line")
        .style("stroke-opacity", 1e-6)

      this.stackedAreas(data, inner_height)
      this.createLegend()
    }

    BubbleChart.prototype.stackedAreas = function(data_input, height) {
      // ## add in vertical overlay line
      vertical = this.vis.append("div")
                    .attr("class", "remove")
                    .style("position", "absolute")
                    .style("z-index", "19")
                    .style("width", "1px")
                    .style("height", this.height)
                    .style("top", "120px")
                    .style("bottom", "0px")
                    .style("left", "0px")
                    .style("background", "#D3D3D3");

      var that = this 
      inner_width = that.width

      this.stack.offset("zero")
      // # re-run the layout on the data to modify the count0
      // # values
      this.stack(data_input)

      this.linear_y.domain([0, d3.max(data_input[0].values.map(function(d) {return d.count0 + d.count}))])
        .range([height, 0])

      this.line.y(function(d){ return  this.linear_y(d.count0)})
      this.area
        .y0(function(d){ return this.linear_y(d.count0)})
        .y1(function(d){ return this.linear_y(d.count0 + d.count)})

      t = this.vis.selectAll(".request")
        .transition()
        .duration(1000)

      t.select("path.line")
        .style("stroke-opacity", 1e-4)
        .attr("d", function(d){ return that.line(d.values)})

      t.select("path.area")
        .style("fill-opacity", 1.0)
        .attr("d", function(d){ return that.area(d.values)})


      function mouseover(d){
        d3.select('.tooldiv').style("display", "inline")
        d3.select('#mouseover_text').remove()
      }

      function mousemove(d, i){
        mousex = d3.mouse(this)[0]
        d3.select('.tooldiv').style("display", "inline")
        increments = inner_width / d.values.length
        idx = Math.floor( mousex / increments )
        elem = d.values[idx - 1]
        d3.select('.tooldiv').html(
          '<b>'+d.key+': </b><em>('+elem.date.getFullYear()+")<br></em> "+'Prize Count: '+ elem.count
          ).style("left", (d3.event.pageX - 34) + "px")
           .style("top", (d3.event.pageY - 18) + "px")

        // # vertical.style("left", mousex + "px")
        parent.vertical.style("left", d3.event.pageX - 5 + "px")
      }

      function mouseout(parent){
        d3.select('.tooldiv').style("display", "none")
        d3.selectAll(".request")
              .transition()
              .duration(250)
              .attr("opacity", .8);
        }

      d3.selectAll('.area')
        .on("mouseover", mouseover)
        .on("mousemove", mousemove)
        .on("mouseout", mouseout)

      d3.selectAll(".request")
        .attr('opacity', .5)
        .on('mouseover', function(d, i){
                  that.vis.selectAll(".request")
                      .transition()
                      .duration(250)
                      .attr("opacity", function(d, j){ return j != i ? 0.5 : .8} )
        })
    }


      // # ---
      // # Helper function that creates the 
      // # legend sidebar.
      // # ---
      BubbleChart.prototype.createLegend = function() {
        var legendRectSize = 18;
        var legendSpacing = 40;
        var offset = 100
        var that = this 

        var color= null
        if (that.state=='race' || that.state == 'gender')
          color = that.fill_color_identity[ that.state ]

        else if ((that.state=='category') && (that.sub_state == 'identity'))
          color = that.fill_color_prize

        else if (that.sub_state == 'criticism')
          color = that.fill_color_category

        var last = 0 
        var next_6 = 0
        var last_6 = 0
        var legend = this.vis.selectAll('.legend')
          .data(color.domain())
          .enter()
          .append('g')
          .attr('class', 'legend')
          .attr('transform', function(d, i) {

            // var bottom = that.height - 50
            // if ((that.state == 'race' || that.state=='gender') && (that.sub_state == 'prize category')){
              var bottom = 0
            // }

            var height = legendRectSize + legendSpacing;
            var offset = height * color.domain().length / 2;

            var horz =  (last * 5.5) + (1.2 * i * legendSpacing)
            var vert = height // - offset;

            if (that.sub_state == 'criticism'){
              if (i < 6){
                var bottom = that.height - 30 // - offset;
                var horz =  (last * 5.5) + (1.2 * i * legendSpacing)
              } else if (i >= 6 && i < 12){
                var bottom = (that.height - 30) - (legendRectSize + 10)
                var horz =  (next_6 * 5.5) + (1.2 * (i % 6) * legendSpacing)
                next_6 = next_6 + d.length
              } else {
                var bottom = (that.height - 30) - 2 * (legendRectSize + 10)
                var horz =  (last_6 * 5.5) + (1.2 * (i % 6) * legendSpacing)
                last_6 = last_6 + d.length
              }
            }
            
            last = last + d.length

            return 'translate(' + horz + ',' + bottom + ')';// (vert + bottom) + ')';
          });

          legend.append('rect')
            .attr('width', legendRectSize)
            .attr('height', legendRectSize)
            .style('fill', function(d) {return color(d)})
            .style('stroke', function(d) {return color(d)});

          legend.append('text')
          .attr('x', legendRectSize + 8)
          .attr('y', legendRectSize - 5)
          .text(function(d) { return d; });   
      }

      ///////////////////////////////
      // Code for map
      ///////////////////////////////
      BubbleChart.prototype.display_international_map = function(){
          var that = this 
          var period_dict = [[
            '(1917-1938): Eyes on Europe',
            '(1939-1945): World War II',
            '(1946-1963): The Soviet Threat',
            '(1964-1980): Asia Rising',
            '(1981-1992): Exploring the Middle East',
            '(1993-Present): Focus on the Global South',
            'Tap to start again'
          ]]

          var m_width = parseInt(vis.attr('width')),
              // width = 450,
              // height = 250,
              country,
              state;

          var projection = d3.geo.kavrayskiy7()
              .scale(175)
              .translate([this.width / 2.13, this.height / 2]);
       
          var path = d3.geo.path()
              .projection(projection);

          var map = this.vis.append("rect")
              .attr("class", "background")
              .attr('id','map')
              .style('fill', 'rgba(174, 216, 230, 0.45)')
              .style('pointer-events', 'all')
              .attr("width", this.width)
              .attr("height", this.height);

         // var label = map.select('[id="hour label"]')
         var label = d3.select("#map_label")
                        .text('Tap map to move through')
                        .attr('y', this.height);
                
          label.data(period_dict)
                .enter()
                .append("text")
                .attr("class", "map_label")
                .attr("text-anchor", "middle")
                

                // label

          var id = 'time'
          var that = this

        d3.json("data/countries.topo.json", function(map_data) {
          // draw the map 
          var subunits = topojson.feature(map_data, map_data.objects['countries-with-antarctica'])
          var paths = this.vis
            .selectAll(".subunit")
              .data(subunits.features)
            .enter()
              .append("path")
              .attr("class", function(d) { 
                return "subunit " + labeler(d);})
              .attr('id', function(d) {return d.properties.name})
              .attr("d", path)
              .attr('fill','#f6e8d0')
              .style('stroke', 'rgba(29, 72, 26, 0.32)')
              .style('stroke-width', '1px');
              // .on("click", function(d) {country_clicked(d);});

        d3.json('data/pulitzer-winners.json', function(d) {return render_map(d, that);})
      })

        $(window).resize(function() {
          var w = parseInt(vis.style('width').replace('px'));
          this.vis.attr("width", w);
          this.vis.attr("height", w * that.height / that.width);
        });

        d3.selectAll(".switch").on("click", function(d){ 
            d3.event.preventDefault()
            id = d3.select(this).attr("id")
            render_map()
        })

        function labeler(d){
          return (
                  d.properties.name == 'Russia' ? 'Russia' :
                  (d.properties.name == 'Greenland' ? 'Greenland' :
                  (d.properties.name == 'Turkey' ? 'Middle East' :
                  ((d.properties.region_wb == 'Middle East & North Africa' && d.properties.continent != 'Africa' )? 'Middle East' : 
                  (d.properties.continent == 'North America' ? d.properties.region_wb : 
                  // (d.properties.continent == 'Asia' ? d.properties.region_wb : 
                    d.properties.continent)
                  ))))
        }

        // helper function to update regions dict
        function _gen_dict(arr, key){
            temp = $.map( arr, function(d){ return (typeof d[key] == 'object') ?  $.map( d[key], function(country) { return $.map(country.split(','), function(split_country){ return { key:split_country.trim(), val:d} }) }) : $.map( d[key].split(','), function(data){ return {key:data.trim(), val:d} }) } )
            return d3.nest().key(function(d) { return d['key']}).map(temp)
        }

        function process_data(filter, return_val, data, period){
          // get subset of events that happened in current period
          // perform array.filter in a way that's hopefully compatible with IE 
          var that = this

          if (filter == 'period'){
            events = []
            for (i=0; i < data.length; i++){
              if (data[i]['Period'] == period) {
                events.push(data[i])
              }
            }
          } else {
            events = data 
          }

          if (return_val == 'regions'){
              output = _gen_dict(events, 'Region')
            } else {
              output = _gen_dict(events, 'Country')
          }
          return output
        }

        function display_next_batch(data, period) {
          // process only data from this period 
          var regions = process_data('period', 'regions', data, period)
          var countries = process_data('period', 'countries', data, period)

          // determine shading scale
          var shade = d3.scale.quantile().domain([-.2,1]).range(colorbrewer.OrRd[9]);
          
          // shade all the regions to their appropriate color
          for (var region in regions){
            d3.selectAll('.' + region.replace(' ', '.'))
              .transition()
              .duration(750)
              .attr("fill", shade(regions[region].length / d3.max($.map(d3.values(regions), function(d){return d.length}))));
          }

          // country_list = d3.entries(countries)

        //   this.vis.selectAll("circle"+period)
        //     .data( country_list )
        //       .enter()
        //     .append("circle")
        //     .attr("class", "pulitzer-winners")
        //     .attr("id", "period-bubbles"+period)
        //     .attr("r", 0)
        //     .attr('opacity', .7)
        //     .attr('fill','lightblue')
        //     .attr("transform", function(d) {
        //       if ((d['key'] != '') & (d['key'] != 'Unspecified "Central American" countries')) {
        //               var p = d3.select('[id="' + d['key'] + '"]').data();
        //               var t = path.centroid(p[0]);
        //               t = (isNaN(t[0]) | isNaN(t[1])) ? [0,0] : t
        //             } else {
        //               t = [0,0]
        //             }
        //       return "translate(" + t + ")";
        //     })
        //   .transition()
        //     .attr("r", function(d){
        //       return Math.log(d['value'].length * 30);
        //     })

        // // mouseover for tool tips 
        // $(".pulitzer-winners").tipsy({ 
        //   gravity: function() {
        //     var obj = this.__data__;
        //     return obj['key'] == 'Antarctica' ? 's' : 'n'
        //   }, 
        //   html: true, 
        //   title: function() {
        //     var obj = this.__data__;
        //     var key = '<b><u>' + obj['key'] + '</b></u><br>'
        //     index = 0
        //     output_str = $.map(obj['value'], function(d_full){
        //       dat = d_full['val']
        //       index++ 
        //       return index + '.<b> ' + dat['Year'] + '</b> '+ dat['Name'] + ' (' + dat['Paper'] + ')<br><em>Details: ' + dat['Details']
        //     +'</em>'}).join('<br><br>')

        //     return key + output_str
        //   }
        // });
        }

        // function display_country_information(region){
        //   region = region.split(' & ')[0]

        //   d3.selectAll('.subunit')
        //       .transition()
        //       .duration(750)
        //       .attr("fill", '#f6e8d0');

        //   d3.selectAll('.' + region.replace(' ', '.'))
        //     .transition()
        //     .duration(750)
        //     .attr("fill", 'gray');

        //   var regions = process_data('all', 'regions')
        //   topics = $.map(d3.values(regions), function(e) { return $.map(e, function(d){ return d['val']['Topic'] }) }) 
          
        //   // get overall categories
        //   var region_counts = {}
        //   $.each(topics, function(d){
        //       region_counts[this] = 0;
        //   })

        //   // fix weird bug
        //   if (region == 'Latin America')
        //     region = 'Latin'

        //   // get counts for specific region
        //   if (region in regions){
        //     regions = $.map(regions[region], function(d){ return d['val']['Topic']})

        //     $.each(regions, function(d){
        //         region_counts[this] = region_counts[this] + 1;
        //     })
        //   }

        //   $(function () {
        //       $('#bar-container').highcharts({
        //           chart: {
        //               type: 'bar'
        //           },
        //           xAxis: {
        //               categories: d3.keys(region_counts),
        //           },
        //         title: {
        //           text: null
        //         },
        //         yAxis: {
        //             title: {
        //                 text: null
        //             },
        //         },
        //           plotOptions: {
        //               bar: {
        //                   dataLabels: {
        //                       enabled: true
        //                   }
        //               }
        //           },
        //           legend: {
        //             enabled:false
        //           },
        //           credits: {
        //               enabled: false
        //           },
        //           series: [{name:'', data:d3.values(region_counts)}]
        //       });
        //   });
        // }

        function render_map(data, that){
          // id= 'time' is the version of the map where the user scrolls through the periods
          if (id == 'time'){
            // d3.select('#bar-container').transition().attr('opacity', 0)

              d3.selectAll('.subunit')
                .transition()
                .duration(750)
                .attr("fill", '#f6e8d0');

              /////////// where the driving from the click-events happens.
              this.vis.on('click', function() {

                // increment period counter to that we filter events for the next period.
                that.period = that.period == 7 ? 1 : that.period + 1
                
                // reset annotation text 
                d3.selectAll('.annotation_text').remove()
                that.annotation_text()

                // reset all colors to default and set the label to the next one. 
                d3.selectAll('.subunit')
                    .transition()
                    .duration(750)
                    .attr("fill", '#f6e8d0');
          
                d3.selectAll("#period-bubbles"+(that.period-1))
                  .transition()
                    .attr("r", 0)
          
                label.text(function(d) { return d[that.period-1]})

                // display the next batch
                display_next_batch(data, that.period)
              })

              // id != 'time' is when the user sees aggregate counts by region 
            } else {
              // $("#map").off()

              d3.selectAll('.subunit')
                  .transition()
                  .duration(750)
                  .attr("fill", '#f6e8d0');
        
              d3.selectAll("#period-bubbles"+(that.period))
                .transition()
                  .attr("r", 0)
        
              label.text('Double Click Region to See Prize Categories')

              d3.selectAll('.subunit')
                  .on("dblclick",function(d) {
                    country = labeler(d)
                    label.text(country)
                    display_country_information(country)
                  })
            }
        }
      }

  return BubbleChart;
})();



//   ===    //////   /////    ===   //
//   ===    /     //     /    ===   //
//   ===    /  //    //  /    ===   //
//   ===    /  / /  / /  /    ===   //
//   ===    /  /  /   /  /    ===   //
//   ===    ////      ////    ===   //


//////// =======================================
// Run main function 
///////=========================================
  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis;
    chart = null;

    render_vis = function(json) {
      console.log(json)
      chart = new BubbleChart(json);
      chart.state = 'all'
      chart.start();
      // return chart.make_linear_chart()
      root.display_bubbles();
    };

    root.display_bubbles = function() {
        chart.change_toggle_active('#toggle_top_level', 1)
        chart.display_group();
      };

    root.display_international = function() {
        return chart.remove_circles()
      };

    root.toggle_view = function(view_type) {
        chart.state = view_type
        chart.sub_state = 'identity'
        chart.toggle_state = 1

        if (view_type === 'race') {
          d3.select('#subheader').html('<em>Breakdown by Race/Ethnicity</em>')
          d3.selectAll('#toggle_top_level').remove()
          chart.aggregate_state = 'individuals'
          chart.display_toggle();
          root.display_bubbles();
          chart.createLegend()
          chart.vis.on('click',null);

        } else if (view_type === 'gender') {
          d3.select('#subheader').html('<em>Breakdown by Sex/Gender</em>')
          d3.selectAll('#toggle_top_level').remove()
          chart.aggregate_state = 'individuals'
          chart.display_toggle()
          root.display_bubbles();
          chart.createLegend()
          chart.vis.on('click',null);

        } else if (view_type === 'category') {
          d3.select('#subheader').html('<em>Breakdown by Prize Category</em>')
          d3.selectAll('#toggle_top_level').remove()
          chart.aggregate_state = 'individuals'
          chart.display_toggle()
          root.display_bubbles();
          chart.action_toggle();

        } else {
          chart.state = 'all'
          d3.select('#subheader').html('<em>All Prize Winners</em>')
          d3.selectAll('#toggle_top_level').remove()
          chart.aggregate_state = 'individuals'
          chart.show_individuals()


          chart.move_override = 1
          chart.change_circle_color()
          chart.move_override = null
          root.display_bubbles();
          // chart.inflate_circles();
          chart.vis.on('click',null);

        }
      };

    d3.json("data/full-records3.json", render_vis);
  });
}).call(this);